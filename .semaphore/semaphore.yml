# Use the latest stable version of Semaphore 2.0 YML syntax:
version: v1.0

# Name of your pipeline. In this example we connect two pipelines with
# a promotion, so it helps to differentiate what's the job of each.
name: Spring Reactive JWT Sample on Semaphore

# An agent defines the environment in which your code runs.
# It is a combination of one of available machine types and operating
# system images. See:
# https://docs.semaphoreci.com/article/20-machine-types
# https://docs.semaphoreci.com/article/32-ubuntu-1804-image
agent:
  machine:
    type: e1-standard-2
    os_image: ubuntu1804 # VM based env

global_job_config:
  prologue:
    commands:
      # Checkout code from Git repository. This step is mandatory if the
      # job is to work with your code.
      - checkout
      - sem-version java 11


# Blocks are the heart of a pipeline and are executed sequentially.
# Each block has a task that defines one or more jobs. Jobs define the
# commands to execute.
# See https://docs.semaphoreci.com/article/62-concepts
blocks:

  - name: "Setup"
    task:

      # Set environment variables that your project requires.
      # See https://docs.semaphoreci.com/article/66-environment-variables-and-secrets
      env_vars:
        - name: MAVEN_OPTS
          value: "-Dmaven.repo.local=.m2"

      jobs:
        - name: Install Dependencies
          commands:

            # Restore dependencies from cache, command won't fail if it's
            # missing.
            # More on caching: https://docs.semaphoreci.com/article/54-toolbox-reference#cache
            - cache restore

            # Goal that resolves all project dependencies, including plugins and
            # reports and their dependencies.
            # see: https://maven.apache.org/plugins/maven-dependency-plugin/go-offline-mojo.html
            - mvn dependency:go-offline

            # Store the latest version of dependencies in cache,
            # to be used in next blocks and future workflows:
            - cache store

  - name: "Build"
    task:
      env_vars:
        - name: MAVEN_OPTS
          value: "-Dmaven.repo.local=.m2"
      jobs:
        - name: Compile and Build
          commands:

            # Restore dependencies from cache, command won't fail if it's
            # missing.
            # More on caching: https://docs.semaphoreci.com/article/54-toolbox-reference#cache
            - cache restore

            - mvn -q clean package -DskipTests #jmeter:configure


  - name: "Test"
    task:
      env_vars:
        - name: MAVEN_OPTS
          value: "-Dmaven.repo.local=.m2"

      # This block runs two jobs in parallel and they both share common
      # setup steps. We can group them in a prologue.
      # See https://docs.semaphoreci.com/article/50-pipeline-yaml#prologue
      prologue:
        commands:
          - sem-service start mongodb
          - sem-service status mongodb
          - cache restore
          - mvn -q test-compile -Dmaven.test.skip=true
      jobs:
        - name: Test and Coverage
          commands:
            - mvn -q test jacoco:report coveralls:report -Pcoverage -Pcoveralls

  # - name: "Performance tests"
  #   task:
  #     env_vars:
  #       - name: MAVEN_OPTS
  #         value: "-Dmaven.repo.local=.m2"
  #     prologue:
  #       commands:
  #         - checkout
  #         - cache restore
  #     jobs:
  #     - name: Benchmark
  #       commands:
  #         - java -version
  #         # Run application in detached mode:
  #         - java -jar target/spring-pipeline-demo.jar > /dev/null &
  #         # Wait for the spring boot application to boot
  #         - sleep 20
  #         - mvn -q jmeter:jmeter
  #         - mvn jmeter:results


# If all tests pass, we move on to build a Docker image.
# This is a job for a separate pipeline which we link with a promotion.
#
# What happens outside semaphore.yml will not appear in GitHub pull
# request status report.
#
# In this example we run docker build automatically on every branch.
# You may want to limit it by branch name, or trigger it manually.
# For more on such options, see:
# https://docs.semaphoreci.com/article/50-pipeline-yaml#promotions
promotions:
  - name: Dockerize
    pipeline_file: docker-build.yml

    # `auto_promote_on` is deprecated in favor of `auto_promote`.
    # `auto_promote` requires conditions to be defined in a when sub-property,
    # following the Conditions DSL, see:
    # https://docs.semaphoreci.com/reference/conditions-reference/
    auto_promote:
      when: "result = 'passed' and (branch = 'master' or tag =~ '^v1\.')"
